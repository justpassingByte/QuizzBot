import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import {
  Dimensions,
  SafeAreaView,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  TouchableOpacity,
  View
} from 'react-native';

const { width } = Dimensions.get('window');

interface AccountType {
  id: string;
  label: string;
  icon: keyof typeof Ionicons.glyphMap;
  color: string;
}

type TopicSlug = string;

interface Topic {
  slug: string;
  name: string;
}

const topicConcepts = [
  {
    concept: 'Khoa h·ªçc & C√¥ng ngh·ªá',
    topics: [
      { slug: 'physics', name: 'V·∫≠t l√Ω' },
      { slug: 'chemistry', name: 'H√≥a h·ªçc' },
      { slug: 'biology', name: 'Sinh h·ªçc' },
      { slug: 'ai', name: 'Tr√≠ tu·ªá nh√¢n t·∫°o' },
      { slug: 'robotics', name: 'Robot' },
      { slug: 'cs', name: 'Khoa h·ªçc m√°y t√≠nh' },
      { slug: 'tech-trends', name: 'Xu h∆∞·ªõng c√¥ng ngh·ªá' },
      { slug: 'sci-fi', name: 'Khoa h·ªçc vi·ªÖn t∆∞·ªüng' },
      { slug: 'math', name: 'To√°n h·ªçc' },
      { slug: 'astronomy', name: 'Thi√™n vƒÉn h·ªçc' },
      { slug: 'earth-science', name: 'Khoa h·ªçc Tr√°i ƒê·∫•t' },
      { slug: 'engineering', name: 'K·ªπ thu·∫≠t' },
      { slug: 'environment', name: 'M√¥i tr∆∞·ªùng' },
      { slug: 'medicine', name: 'Y h·ªçc' },
      { slug: 'science', name: 'Khoa h·ªçc' },
    ],
  },
  {
    concept: 'L·ªãch s·ª≠ & X√£ h·ªôi',
    topics: [
      { slug: 'history', name: 'L·ªãch s·ª≠' },
      { slug: 'countries', name: 'Qu·ªëc gia' },
      { slug: 'economics', name: 'Kinh t·∫ø' },
      { slug: 'geography', name: 'ƒê·ªãa l√Ω' },
      { slug: 'politics', name: 'Ch√≠nh tr·ªã' },
      { slug: 'law', name: 'Lu·∫≠t ph√°p' },
      { slug: 'culture', name: 'VƒÉn h√≥a' },
      { slug: 'philosophy', name: 'Tri·∫øt h·ªçc' },
      { slug: 'education', name: 'Gi√°o d·ª•c' },
      { slug: 'sociology', name: 'X√£ h·ªôi h·ªçc' },
      { slug: 'religion', name: 'T√¥n gi√°o' },
    ],
  },
  {
    concept: 'Ngh·ªá thu·∫≠t & VƒÉn h√≥a',
    topics: [
      { slug: 'art', name: 'Ngh·ªá thu·∫≠t' },
      { slug: 'music', name: '√Çm nh·∫°c' },
      { slug: 'literature', name: 'VƒÉn h·ªçc' },
      { slug: 'fiction', name: 'Ti·ªÉu thuy·∫øt' },
      { slug: 'drama', name: 'K·ªãch' },
      { slug: 'photography', name: 'Nhi·∫øp ·∫£nh' },
      { slug: 'celebrities', name: 'Ng∆∞·ªùi n·ªïi ti·∫øng' },
      { slug: 'movies', name: 'Phim ·∫£nh' },
      { slug: 'animation', name: 'Ho·∫°t h√¨nh' },
      { slug: 'fashion', name: 'Th·ªùi trang' },
      { slug: 'design', name: 'Thi·∫øt k·∫ø' },
    ],
  },
  {
    concept: 'Ng√¥n ng·ªØ',
    topics: [
      { slug: 'english', name: 'Ti·∫øng Anh' },
      { slug: 'spanish', name: 'Ti·∫øng T√¢y Ban Nha' },
      { slug: 'chinese', name: 'Ti·∫øng Trung' },
      { slug: 'french', name: 'Ti·∫øng Ph√°p' },
      { slug: 'german', name: 'Ti·∫øng ƒê·ª©c' },
      { slug: 'japanese', name: 'Ti·∫øng Nh·∫≠t' },
      { slug: 'korean', name: 'Ti·∫øng H√†n' },
      { slug: 'vietnamese', name: 'Ti·∫øng Vi·ªát' },
    ],
  },
  {
    concept: 'S·ª©c kh·ªèe & ƒê·ªùi s·ªëng',
    topics: [
      { slug: 'health', name: 'S·ª©c kh·ªèe' },
      { slug: 'yoga', name: 'Yoga' },
      { slug: 'nutrition', name: 'Dinh d∆∞·ª°ng' },
      { slug: 'psychology', name: 'T√¢m l√Ω h·ªçc' },
      { slug: 'wildlife', name: 'ƒê·ªông v·∫≠t hoang d√£' },
      { slug: 'food', name: '·∫®m th·ª±c' },
      { slug: 'lifestyle', name: 'Phong c√°ch s·ªëng' },
      { slug: 'travel', name: 'Du l·ªãch' },
    ],
  },
  {
    concept: 'Gi·∫£i tr√≠ & Th·ªÉ thao',
    topics: [
      { slug: 'sports', name: 'Th·ªÉ thao' },
      { slug: 'football', name: 'B√≥ng ƒë√°' },
      { slug: 'basketball', name: 'B√≥ng r·ªï' },
      { slug: 'tennis', name: 'Qu·∫ßn v·ª£t' },
      { slug: 'cricket', name: 'Cricket' },
      { slug: 'quiz', name: 'C√¢u ƒë·ªë' },
      { slug: 'wonders', name: 'K·ª≥ quan' },
      { slug: 'games', name: 'Tr√≤ ch∆°i' },
      { slug: 'esports', name: 'Th·ªÉ thao ƒëi·ªán t·ª≠' },
      { slug: 'boardgames', name: 'Boardgame' },
    ],
  },
  {
    concept: 'Kinh doanh & C√¥ng vi·ªác',
    topics: [
      { slug: 'business', name: 'Kinh doanh' },
      { slug: 'finance', name: 'T√†i ch√≠nh' },
      { slug: 'marketing', name: 'Ti·∫øp th·ªã' },
      { slug: 'startup', name: 'Kh·ªüi nghi·ªáp' },
      { slug: 'management', name: 'Qu·∫£n l√Ω' },
      { slug: 'career', name: 'Ngh·ªÅ nghi·ªáp' },
      { slug: 'productivity', name: 'NƒÉng su·∫•t' },
    ],
  },
  {
    concept: 'Kh√°c',
    topics: [
      { slug: 'algebra', name: 'ƒê·∫°i s·ªë' },
      { slug: 'logic', name: 'Logic' },
      { slug: 'puzzle', name: 'C√¢u ƒë·ªë logic' },
      { slug: 'random', name: 'Ng·∫´u nhi√™n' },
    ],
  },
];

const OptionalSurveyScreens = () => {
  const [currentScreen, setCurrentScreen] = useState(1);
  const [selectedAccount, setSelectedAccount] = useState('');
  const [selectedTopics, setSelectedTopics] = useState<TopicSlug[]>([]);
  const router = useRouter();

  const accountTypes: AccountType[] = [
    { id: 'personal', label: 'C√° nh√¢n', icon: 'person', color: '#3b82f6' },
    { id: 'teacher', label: 'Gi√°o vi√™n', icon: 'school', color: '#f97316' },
    { id: 'student', label: 'H·ªçc sinh', icon: 'book', color: '#22c55e' },
    { id: 'professional', label: 'Chuy√™n nghi·ªáp', icon: 'briefcase', color: '#ec4899' }
  ];

  const topics = [
    'V·∫≠t l√Ω', 'Tr√≠ tu·ªá nh√¢n t·∫°o', 'Khoa h·ªçc', 'H√†nh ƒë·ªông', 'Sinh h·ªçc', 'Yoga', 
    'L·ªãch s·ª≠', 'Robot', 'Cricket', 'Ti·ªÉu thuy·∫øt', 'C√¢u ƒë·ªë', 'S·ª©c kh·ªèe', 'Ti·∫øng Anh', 
    'ƒê·∫°i s·ªë', 'Khoa h·ªçc m√°y t√≠nh', 'Ng∆∞·ªùi n·ªïi ti·∫øng', 'ƒê·ªông v·∫≠t hoang d√£', 'Ngh·ªá thu·∫≠t', 
    'Xu h∆∞·ªõng c√¥ng ngh·ªá', 'Ti·∫øng T√¢y Ban Nha', 'Qu·ªëc gia', 'Ti·∫øng Trung', 'K·ªãch', 
    'K·ª≥ quan', 'Kinh t·∫ø', 'ƒê·ªãa l√Ω', 'Khoa h·ªçc vi·ªÖn t∆∞·ªüng', 'Nhi·∫øp ·∫£nh'
  ];

  const handleAccountSelect = (accountId: string): void => {
    setSelectedAccount(accountId);
  };

  interface HandleTopicToggle {
    (topicSlug: TopicSlug): void;
  }

  const handleTopicToggle: HandleTopicToggle = (topicSlug) => {
    setSelectedTopics((prev: TopicSlug[]) =>
      prev.includes(topicSlug)
        ? prev.filter((slug: TopicSlug) => slug !== topicSlug)
        : [...prev, topicSlug]
    );
  };

  const handleBack = () => {
    if (currentScreen === 2) {
      setCurrentScreen(1);
    }
  };

  // Header component with consistent layout
  const Header = ({ progress, buttonText, onButtonPress, disabled, showBack = false }: {
    progress: number; // progress as a number (e.g., 33 for 33%)
    buttonText: string;
    onButtonPress: () => void;
    disabled: boolean;
    showBack?: boolean;
  }) => (
    <View style={styles.header}>
      <View style={styles.headerContent}>
        {showBack && (
          <TouchableOpacity onPress={handleBack} style={styles.backButton}>
            <Ionicons name="chevron-back" size={24} color="#666" />
          </TouchableOpacity>
        )}
        
        <View style={styles.progressContainer}>
          <View style={styles.progressBar}>
            <View style={[styles.progressFill, { width: `${progress}%` }]} />
          </View>
        </View>

        <TouchableOpacity
          onPress={onButtonPress}
          style={[styles.nextButton, disabled && styles.disabledButton]}
          disabled={disabled}
        >
          <Text style={[styles.nextButtonText, disabled && styles.disabledButtonText]}>
            {buttonText}
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  // Screen 1: Account Type Selection
  const AccountTypeScreen = () => (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor="#fff" />
      
      <Header
        progress={33}
        buttonText="TI·∫æP THEO"
        onButtonPress={() => setCurrentScreen(2)}
        disabled={!selectedAccount}
      />

      <ScrollView style={styles.scrollContent} showsVerticalScrollIndicator={false}>
        <View style={styles.content}>
          <View style={styles.titleContainer}>
            <Text style={styles.title}>
              Ch·ªçn lo·∫°i t√†i kho·∫£n b·∫°n mu·ªën{' '}
              <Text style={styles.highlightText}>t·∫°o</Text>? ü§î
            </Text>
            <Text style={styles.subtitle}>Ch·ªçn m·ªôt lo·∫°i t√†i kho·∫£n ph√π h·ª£p v·ªõi b·∫°n.</Text>
          </View>

          <View style={styles.accountOptions}>
            {accountTypes.map((account) => (
              <TouchableOpacity
                key={account.id}
                onPress={() => handleAccountSelect(account.id)}
                style={[
                  styles.accountOption,
                  selectedAccount === account.id && styles.selectedOption
                ]}
              >
                <View style={[styles.iconContainer, { backgroundColor: account.color }]}>
                  <Ionicons name={account.icon} size={24} color="white" />
                </View>
                <Text style={styles.accountLabel}>{account.label}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );

  // Screen 2: Topic Selection
  const TopicSelectionScreen = () => (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor="#fff" />
      
      <Header
        progress={66}
        buttonText="HO√ÄN TH√ÄNH"
        onButtonPress={() => {
          // Navigate to signup screen with selected data
          router.push({
            pathname: '/signup',
            params: { selectedAccount, selectedTopics: JSON.stringify(selectedTopics) },
          });
        }}
        disabled={selectedTopics.length === 0}
        showBack={true}
      />

      <ScrollView style={styles.scrollContent} showsVerticalScrollIndicator={false}>
        <View style={styles.content}>
          <View style={styles.titleContainer}>
            <Text style={styles.title}>
              ƒê·ªÉ c√° nh√¢n h√≥a tr·∫£i nghi·ªám quiz, ch·ªçn c√°c ch·ªß ƒë·ªÅ{' '}
              <Text style={styles.highlightText}>b·∫°n quan t√¢m</Text>
            </Text>
            <Text style={styles.subtitle}>Ch·ªçn √≠t nh·∫•t m·ªôt ch·ªß ƒë·ªÅ ƒë·ªÉ ti·∫øp t·ª•c.</Text>
          </View>

          {topicConcepts.map((conceptGroup) => (
            <View key={conceptGroup.concept} style={styles.conceptGroup}>
              <Text style={styles.conceptTitle}>{conceptGroup.concept}</Text>
              <View style={styles.topicsContainer}>
                {conceptGroup.topics.map((topic) => (
                  <TouchableOpacity
                    key={topic.slug}
                    onPress={() => handleTopicToggle(topic.slug)}
                    style={[
                      styles.topicTag,
                      selectedTopics.includes(topic.slug) && styles.selectedTopicTag,
                    ]}
                  >
                    <Text
                      style={[
                        styles.topicText,
                        selectedTopics.includes(topic.slug) &&
                          styles.selectedTopicText,
                      ]}
                    >
                      {topic.name}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          ))}
        </View>
      </ScrollView>
    </SafeAreaView>
  );

  return (
    <>
      {currentScreen === 1 ? <AccountTypeScreen /> : <TopicSelectionScreen />}
      
      {/* Demo Navigation */}
      <View style={styles.demoNav}>
        <TouchableOpacity
          onPress={() => setCurrentScreen(1)}
          style={[styles.demoButton, currentScreen === 1 && styles.activeDemoButton]}
        >
          <Text style={[styles.demoButtonText, currentScreen === 1 && styles.activeDemoButtonText]}>
            Ch·ªçn T√†i Kho·∫£n
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => setCurrentScreen(2)}
          style={[styles.demoButton, currentScreen === 2 && styles.activeDemoButton]}
        >
          <Text style={[styles.demoButtonText, currentScreen === 2 && styles.activeDemoButtonText]}>
            Ch·ªçn Ch·ªß ƒê·ªÅ
          </Text>
        </TouchableOpacity>
      </View>
    </>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    paddingHorizontal: 20,
    paddingTop: 10,
    paddingBottom: 10,
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    height: 40,
  },
  backButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'flex-start',
  },
  progressContainer: {
    flex: 1,
    marginHorizontal: 15,
  },
  progressBar: {
    height: 8,
    backgroundColor: '#e5e7eb',
    borderRadius: 4,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#3b82f6',
    borderRadius: 4,
  },
  nextButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: '#3b82f6',
    borderRadius: 8,
    minWidth: 100,
    alignItems: 'center',
  },
  disabledButton: {
    backgroundColor: '#93c5fd',
  },
  nextButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  disabledButtonText: {
    color: '#ccc',
  },
  scrollContent: {
    flex: 1,
  },
  content: {
    paddingHorizontal: 20,
    paddingTop: 10,
  },
  titleContainer: {
    alignItems: 'center',
    marginBottom: 30,
    marginTop: 20,
  },
  title: {
    fontSize: 22,
    fontWeight: '700',
    color: '#111827',
    textAlign: 'center',
    lineHeight: 28,
    marginBottom: 8,
  },
  highlightText: {
    color: '#3b82f6',
  },
  subtitle: {
    fontSize: 14,
    color: '#6b7280',
    textAlign: 'center',
  },
  accountOptions: {
    marginBottom: 40,
  },
  accountOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 16,
    paddingHorizontal: 16,
    borderRadius: 16,
    marginBottom: 12,
    backgroundColor: '#f9fafb',
  },
  selectedOption: {
    borderWidth: 2,
    borderColor: '#3b82f6',
    backgroundColor: '#eff6ff',
  },
  iconContainer: {
    width: 48,
    height: 48,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  accountLabel: {
    fontSize: 18,
    fontWeight: '600',
    color: '#111827',
  },
  topicsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
    marginBottom: 10,
  },
  topicTag: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 20,
    backgroundColor: '#f3f4f6',
    alignItems: 'center',
    justifyContent: 'center',
  },
  selectedTopicTag: {
    backgroundColor: '#3b82f6',
  },
  topicText: {
    fontSize: 13,
    fontWeight: '500',
    color: '#374151',
    textAlign: 'center',
    lineHeight: 16,
  },
  selectedTopicText: {
    color: '#fff',
  },
  conceptGroup: {
    marginBottom: 24,
  },
  conceptTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 16,
  },
  demoNav: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    padding: 16,
    backgroundColor: '#f3f4f6',
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
  },
  demoButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
    backgroundColor: '#e5e7eb',
  },
  activeDemoButton: {
    backgroundColor: '#3b82f6',
  },
  demoButtonText: {
    color: '#374151',
    fontWeight: '500',
  },
  activeDemoButtonText: {
    color: '#fff',
  },
});

export default OptionalSurveyScreens; 